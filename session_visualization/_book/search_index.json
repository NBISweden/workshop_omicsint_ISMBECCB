[
["installation-and-testing-the-setup.html", "Cytoscape_R 1 Installation and testing the setup 1.1 Conda Environment 1.2 Installation of cytoscape apps using R 1.3 Intuition behind using RCy3 to analyze networks with cytoscape. 1.4 Data preparation 1.5 retrieve networks for Genes/ proteins of interest 1.6 To do 1.7 layout and visually style the resulting networks 1.8 Creating a degree filter 1.9 Creating a column filter 1.10 Generate own networks using co-expression analyse 1.11 Bonus exercises 1.12 End the session", " Cytoscape_R Ashfaq Ali 21/09/2020 1 Installation and testing the setup 1.1 Conda Environment If you have the course conda environment set up, please activate and use that for this session. Otherwise use “env-cytoscape.yml” file to create the environment. bash conda env create -f env-cytoscape.yml conda activate cyto ## If you have the course conda environment set up, please use that for this session. R suppressMessages(library(dplyr)) suppressMessages(library(RCy3)) suppressMessages(library(readxl)) suppressMessages(library(tidyverse)) suppressMessages(library(readxl)) Start the cytoscape app and rstudio using following commands bash rstudio &amp; cytoscape &amp; R cytoscapePing() cytoscapeVersionInfo() ## [1] &quot;You are connected to Cytoscape!&quot; ## apiVersion cytoscapeVersion ## &quot;v1&quot; &quot;3.8.0&quot; 1.2 Installation of cytoscape apps using R To install cytoscape apps one can use the Cytoscape GUI through app manager or can install directly from R using the following code. R installation_responses &lt;- c() #list of app to install cyto_app_toinstall &lt;- c(&quot;clustermaker2&quot;, &quot;enrichmentmap&quot;, &quot;autoannotate&quot;, &quot;wordcloud&quot;, &quot;stringapp&quot;, &quot;aMatReader&quot;, &quot;yFiles Layout Algorithms&quot;, &quot;enhancedGraphics&quot;) cytoscape_version &lt;- unlist(strsplit( cytoscapeVersionInfo()[&#39;cytoscapeVersion&#39;],split = &quot;\\\\.&quot;)) if(length(cytoscape_version) == 3 &amp;&amp; as.numeric(cytoscape_version[1]&gt;=3) &amp;&amp; as.numeric(cytoscape_version[2]&gt;=7)){ for(i in 1:length(cyto_app_toinstall)){ #check to see if the app is installed. Only install it if it hasn&#39;t been installed if(!grep(commandsGET(paste(&quot;apps status app=\\&quot;&quot;, cyto_app_toinstall[1],&quot;\\&quot;&quot;, sep=&quot;&quot;)), pattern = &quot;status: Installed&quot;)){ installation_response &lt;-commandsGET(paste(&quot;apps install app=\\&quot;&quot;, cyto_app_toinstall[i],&quot;\\&quot;&quot;, sep=&quot;&quot;)) installation_responses &lt;- c(installation_responses,installation_response) } else{ installation_responses &lt;- c(installation_responses,&quot;already installed&quot;) } } installation_summary &lt;- data.frame(name = cyto_app_toinstall, status = installation_responses) knitr::kable(list(installation_summary), booktabs = TRUE, caption = &#39;A Summary of automated app installation&#39; ) } 1.3 Intuition behind using RCy3 to analyze networks with cytoscape. Cytoscape(www.cytoscape.org) is probably the most popular applications for network analysis and visualization with GUI. In this session, we will learn about new capabilities to integrate Cytoscape into programmatic workflows and pipelines using R. Apart from programmatic workflow, the access through R allows direct access to network analyses as being part of an ongoing analyses instead of a separate instance. This also makes analyses steps more explicit hence more reproducible. We have already been introduced to network biology themes and concepts, therefor we will translate these into Cytoscape terms for practical applications. This tutorial will be a hands-on session working towards accessing and controlling Cytoscape from R to perform a network analysis. We will go through the following themes that are usually required in network visualization and analyses. retrieve networks for Genes/ proteins of interest layout and visually style the resulting networks import external data and map them onto a network filter networks and customize styling perform co-expression analyses and create your own co-expression network visualize the results and map attributes to user created networks 1.4 Data preparation We will be using data from the Charge consortium in which they have analyzed quite large cohort with association of methylation and gene expression with Age. We will use some of the results for visualization in Cytoscape. In addition there is a list of proteins and coefficients from a proteomics data-set provided in the /Data/AgeingTopProteins.txt. All these data aim to identify markers associated with age. We can try and find overlaps in these data-sets using network analyses in cytoscape. R AgeingExpMeth &lt;- read_excel(&quot;./Data/AgeExpMethSig.xlsx&quot;, skip = 0) ## Provide the path to the file with data Age_prot &lt;- read_table2(&quot;./Data/AgeingTopProteins.txt&quot;) Age_exp &lt;- AgeingExpMeth %&gt;% arrange(`ExpAgeP-value`) %&gt;% slice_head(n=100) Age_meth &lt;- AgeingExpMeth %&gt;% arrange(`MethAgeP-value`) %&gt;% slice_head(n=100) rownames(Age_exp) &lt;- Age_exp$Gene To get an overview of what commands and functions are available through “RCy3”, please have a look at the help pages. More details with examples are also available through package vignettes. R help(package=RCy3) browseVignettes(&quot;RCy3&quot;) 1.5 retrieve networks for Genes/ proteins of interest Get a subset of genes of interest from our Ageing data: R AgeingExpe_string_interaction_cmd &lt;- paste(&#39;string protein query taxonID=9606 cutoff=0.9 query=&#39;, paste(Age_exp$Gene, collapse=&quot;,&quot;),&#39;&quot;&#39;,sep=&quot;&quot;) commandsGET(AgeingExpe_string_interaction_cmd ) ## [1] &quot;Loaded network &#39;String Network - 11&#39; with 109 nodes and 98 edges&quot; R renameNetwork(&quot;AgeingExpeNet&quot;) R AgeingMeth_string_interaction_cmd &lt;- paste(&#39;string protein query taxonID=9606 cutoff=0.9 query=&#39;, paste(Age_meth$Gene, collapse=&quot;,&quot;),&#39;&quot;&#39;,sep=&quot;&quot;) commandsGET(AgeingMeth_string_interaction_cmd) renameNetwork(&quot;AgeingMethNet&quot;) R AgeingProt_string_interaction_cmd &lt;- paste(&#39;string protein query taxonID=9606 limit=150 cutoff=0.9 query=&#39;, paste(Age_prot$protein, collapse=&quot;,&quot;),&#39;&quot;&#39;,sep=&quot;&quot;) test &lt;-commandsGET(AgeingProt_string_interaction_cmd) renameNetwork(&quot;AgeingProtNet&quot;) Let us have a look at what networks we have. R getNetworkList() ## [1] &quot;String Network - 11&quot; ## [2] &quot;Network_3&quot; ## [3] &quot;String Network - 7&quot; ## [4] &quot;Coexpression_network&quot; ## [5] &quot;Network_2&quot; ## [6] &quot;Ageing: highly connected nodes&quot; ## [7] &quot;Network&quot; ## [8] &quot;String Network - 9&quot; ## [9] &quot;Network_1&quot; ## [10] &quot;String Network - 6&quot; ## [11] &quot;String Network - 10&quot; ## [12] &quot;Network_5&quot; ## [13] &quot;AgeingMethNet&quot; ## [14] &quot;String Network - 5&quot; ## [15] &quot;String Network - 8&quot; ## [16] &quot;Ageing: highly connected nodes&quot; ## [17] &quot;Network_4&quot; ## [18] &quot;Ageing: highly connected nodes&quot; ## [19] &quot;AgeingProtNet&quot; ## [20] &quot;Ageing: highly connected nodes&quot; ## [21] &quot;AgeingExpeNet&quot; To work with a respective network, we need to set the environment we wish to work with. R setCurrentNetwork(network=&quot;AgeingExpeNet&quot;) Save the original network to a file. R path &lt;- file.path(getwd(), &quot;/Data/&quot;,&quot;ExpnetworkOriginal.png&quot;) # initial_string_network_png_file_name &lt;- file.path(getwd(), &quot;/Path/to/your/network.png&quot;) exportImage(path, type = &quot;png&quot;, resolution = 300) ## file ## &quot;/Users/cob-aaf/Documents/GitHub/session_visualization/Data/ExpnetworkOriginal.png&quot; If cytoscape hangs waiting for user response if file already exists. Remove it first 1.6 To do Can you save the “AgeingMethNet” and “AgeingProtNet” to the respective files? Use your desired node attributes among the cytoscape network columns to improve visualization. 1.7 layout and visually style the resulting networks Now that we have a few networks loaded in cytoscape, let us work with those based on our interest. Change the layout of the network and save to a new file. R layouts &lt;- getLayoutNames() ## Access the available lyouts in cytoscape layoutNetwork(layouts[3]) ## Change the layout to circular exportImage(path, type = &quot;png&quot;, resolution = 300) ## Cytoscape will hang as you are trying to overwite an existing file path &lt;- file.path(getwd(), &quot;/Data/&quot;,&quot;ExpnetworkOriginalCircular.png&quot;) # update the path exportImage(path, type = &quot;png&quot;, resolution = 300) ## Cytoscape will hang as you are trying to overwite an existing file ## file ## &quot;/Users/cob-aaf/Documents/GitHub/session_visualization/Data/ExpnetworkOriginal.png&quot; ## file ## &quot;/Users/cob-aaf/Documents/GitHub/session_visualization/Data/ExpnetworkOriginalCircular.png&quot; Get available parameters for a specific layout. R getLayoutPropertyNames(layout.name=&#39;force-directed&#39;) ## [1] &quot;Available arguments for &#39;layout force-directed&#39;:&quot; ## [1] &quot;defaultEdgeWeight&quot; ## [2] &quot;defaultNodeMass&quot; ## [3] &quot;defaultSpringCoefficient&quot; ## [4] &quot;defaultSpringLength&quot; ## [5] &quot;edgeAttribute&quot; ## [6] &quot;isDeterministic&quot; ## [7] &quot;maxWeightCutoff&quot; ## [8] &quot;minWeightCutoff&quot; ## [9] &quot;network&quot; ## [10] &quot;nodeAttribute&quot; ## [11] &quot;nodeList&quot; ## [12] &quot;numIterations&quot; ## [13] &quot;singlePartition&quot; ## [14] &quot;type&quot; Apply the layout by changing parameters again R layoutNetwork(&#39;force-directed defaultSpringCoefficient=0.0000008 defaultSpringLength=70&#39;) Overlay our expression data on the String network. To do this we will be using the loadTableData function from RCy3. It is important to make sure that that your identifiers types match up. You can check what is used by String by pulling in the column names of the node attribute table. R getTableColumnNames(&#39;node&#39;) ## [1] &quot;SUID&quot; ## [2] &quot;shared name&quot; ## [3] &quot;name&quot; ## [4] &quot;selected&quot; ## [5] &quot;stringdb::canonical name&quot; ## [6] &quot;display name&quot; ## [7] &quot;stringdb::full name&quot; ## [8] &quot;stringdb::database identifier&quot; ## [9] &quot;stringdb::description&quot; ## [10] &quot;@id&quot; ## [11] &quot;stringdb::namespace&quot; ## [12] &quot;stringdb::node type&quot; ## [13] &quot;query term&quot; ## [14] &quot;stringdb::sequence&quot; ## [15] &quot;stringdb::species&quot; ## [16] &quot;stringdb::STRING style&quot; ## [17] &quot;stringdb::enhancedLabel Passthrough&quot; ## [18] &quot;compartment::cytoskeleton&quot; ## [19] &quot;compartment::cytosol&quot; ## [20] &quot;compartment::endoplasmic reticulum&quot; ## [21] &quot;compartment::endosome&quot; ## [22] &quot;compartment::extracellular&quot; ## [23] &quot;compartment::golgi apparatus&quot; ## [24] &quot;compartment::lysosome&quot; ## [25] &quot;compartment::mitochondrion&quot; ## [26] &quot;compartment::nucleus&quot; ## [27] &quot;compartment::peroxisome&quot; ## [28] &quot;compartment::plasma membrane&quot; ## [29] &quot;stringdb::interactor score&quot; ## [30] &quot;stringdb::structures&quot; ## [31] &quot;target::development level&quot; ## [32] &quot;target::family&quot; ## [33] &quot;tissue::adrenal gland&quot; ## [34] &quot;tissue::blood&quot; ## [35] &quot;tissue::bone&quot; ## [36] &quot;tissue::bone marrow&quot; ## [37] &quot;tissue::eye&quot; ## [38] &quot;tissue::gall bladder&quot; ## [39] &quot;tissue::heart&quot; ## [40] &quot;tissue::intestine&quot; ## [41] &quot;tissue::kidney&quot; ## [42] &quot;tissue::liver&quot; ## [43] &quot;tissue::lung&quot; ## [44] &quot;tissue::muscle&quot; ## [45] &quot;tissue::nervous system&quot; ## [46] &quot;tissue::pancreas&quot; ## [47] &quot;tissue::saliva&quot; ## [48] &quot;tissue::skin&quot; ## [49] &quot;tissue::spleen&quot; ## [50] &quot;tissue::stomach&quot; ## [51] &quot;tissue::thyroid gland&quot; ## [52] &quot;tissue::urine&quot; ## [53] &quot;ExpAgeUp&quot; ## [54] &quot;ExpAgeDown&quot; ## [55] &quot;MethAgeUp&quot; ## [56] &quot;MethAgeDown&quot; ## [57] &quot;ExpMethUp&quot; ## [58] &quot;ExpMethDown&quot; ## [59] &quot;Gene&quot; ## [60] &quot;ExpAgeP-value&quot; ## [61] &quot;ExpAgeDirection&quot; ## [62] &quot;MethAgeP-value&quot; ## [63] &quot;MethAgeDirection&quot; ## [64] &quot;ExpMethP-value&quot; ## [65] &quot;ExpMethDirection&quot; ## [66] &quot;TopMediator&quot; ## [67] &quot;Z-score&quot; ## [68] &quot;MedP-value&quot; ## [69] &quot;NoCpGsTested&quot; ## [70] &quot;NoBonferroniSig&quot; ## [71] &quot;degree.layout&quot; The column “display name” contains gene names which are also found in our Ageing Expression data-set. To import our expression data we will match our data-set to the “display name” node attribute. R ?loadTableData loadTableData(data= as.data.frame(Age_exp), table.key.column = &quot;display name&quot;, data.key.column= &quot;Gene&quot;) #default data.frame key is row.names ## [1] &quot;Success: Data loaded in defaultnode table&quot; Modify the Visual Style Create your own visual style to visualize your expression data on the String network. Start with a default style R my.style.name = &quot;AgeingStyle&quot; defaults.list &lt;- list(NODE_SHAPE=&quot;ellipse&quot;, NODE_SIZE=60, NODE_FILL_COLOR=&quot;#AAAAAA&quot;, EDGE_TRANSPARENCY=120) node.label.map &lt;- mapVisualProperty(&#39;node label&#39;,&#39;display name&#39;,&#39;p&#39;) # p for passthrough; nothing else needed createVisualStyle(my.style.name, defaults.list, list(node.label.map)) setVisualStyle(style.name=my.style.name) ## message ## &quot;Visual Style applied.&quot; R min.Exp.zscore = min(Age_exp$`Z-score`, na.rm=TRUE) max.Exp.zscore = max(Age_exp$`Z-score`, na.rm=TRUE) #mid..Exp.zscore = mean data.values = c(min.Exp.zscore, mean(min.Exp.zscore,max.Exp.zscore) ,max.Exp.zscore) Next, we use the RColorBrewer package to help us pick good colors to pair with our data values. R library(RColorBrewer) display.brewer.all(length(data.values), colorblindFriendly=TRUE, type=&quot;div&quot;) # div,qual,seq,all node.colors &lt;- c(rev(brewer.pal(length(data.values), &quot;RdYlBu&quot;))) R setNodeColorMapping(&quot;Z-score&quot;, data.values, node.colors, style.name=my.style.name) Change the size of the node to be correlated with the Age p-value. R setNodeSizeMapping(table.column = &#39;ExpAgeP-value&#39;, table.column.values = c(min(Age_exp$`ExpAgeP-value`), mean(Age_exp$`ExpAgeP-value`), max(Age_exp$`ExpAgeP-value`)), sizes = c(30, 60, 150), mapping.type = &quot;c&quot;, style.name = my.style.name) 1.8 Creating a degree filter Every node in a network has a Degree property, which corresponds to the number of edges connecting the node to other nodes, either as a target or source. Filtering based on node degree is a useful way to remove nodes with too few (or too many) connections. In this example we want to exclude low degree nodes, e.g., those with only 0, 1 or 2 connections: R createDegreeFilter(&#39;degree filter&#39;, c(0,2), &#39;IS_NOT_BETWEEN&#39;) ## $nodes ## [1] &quot;9606.ENSP00000357307&quot; &quot;9606.ENSP00000360609&quot; ## [3] &quot;9606.ENSP00000355759&quot; &quot;9606.ENSP00000398124&quot; ## [5] &quot;9606.ENSP00000346088&quot; &quot;9606.ENSP00000352995&quot; ## [7] &quot;9606.ENSP00000221801&quot; &quot;9606.ENSP00000278616&quot; ## [9] &quot;9606.ENSP00000265165&quot; &quot;9606.ENSP00000479618&quot; ## [11] &quot;9606.ENSP00000368880&quot; &quot;9606.ENSP00000225916&quot; ## [13] &quot;9606.ENSP00000312397&quot; &quot;9606.ENSP00000388107&quot; ## [15] &quot;9606.ENSP00000272317&quot; &quot;9606.ENSP00000263253&quot; ## [17] &quot;9606.ENSP00000262367&quot; &quot;9606.ENSP00000348461&quot; ## [19] &quot;9606.ENSP00000341551&quot; &quot;9606.ENSP00000304697&quot; ## [21] &quot;9606.ENSP00000441543&quot; &quot;9606.ENSP00000332973&quot; ## [23] &quot;9606.ENSP00000360532&quot; ## ## $edges ## [1] NA R createSubnetwork(subnetwork.name =&#39;Ageing: highly connected nodes&#39;) ## network ## 268046 1.9 Creating a column filter We could also filter the network based on any of the column data available. Let us filter nodes that come from “target” database belonging to “family” “TF”. R createColumnFilter(filter.name=&#39;transcription factors&#39;, column=&quot;target::family&quot;, &quot;TF&quot;, &quot;IS&quot;, network = &quot;Ageing: highly connected nodes&quot;) ## $nodes ## [1] &quot;9606.ENSP00000265165&quot; &quot;9606.ENSP00000341551&quot; &quot;9606.ENSP00000479618&quot; &quot;9606.ENSP00000332973&quot; &quot;9606.ENSP00000360532&quot; ## [6] &quot;9606.ENSP00000368880&quot; &quot;9606.ENSP00000398124&quot; ## ## $edges ## [1] NA Now we will select the nodes from the family and color them differently in the network. R nodes &lt;- getSelectedNodes() setNodeColorBypass(nodes,new.colors=&#39;#FF0088&#39;) Here the string matching is based on discrete values but it can be from a continuous variable? Can you select a few nodes based on your favorite column and see whether you can map some column as node attributes? 1.10 Generate own networks using co-expression analyse With the following block of code one can perform co-expression analyses. Here you are already provided with correlation matrix that you can use to follow the steps. R # scale the data if required # RNASeq_expression &lt;- scale(NASeq_expression, center = TRUE, scale = TRUE) # # #rownames(RNASeq_expression) &lt;- RNASeq_expression_matrix$Name # RNAseq_correlation_matrix &lt;- cor(t(RNASeq_expression), method=&quot;pearson&quot;) # # #set the diagonal of matrix to zero - eliminate self-correlation # RNAseq_correlation_matrix[ row(RNAseq_correlation_matrix) == col(RNAseq_correlation_matrix) ] &lt;- 0 # # # set all correlations that are less than 0.7 to zero # RNAseq_correlation_matrix[which(RNAseq_correlation_matrix&lt;0.60)] &lt;- 0 # # #get rid of rows and columns that have no correlations with the above thresholds # RNAseq_correlation_matrix &lt;- RNAseq_correlation_matrix[which(rowSums(RNAseq_correlation_matrix) != 0), # which(colSums(RNAseq_correlation_matrix) !=0)] # # #correlation_filename &lt;- file.path(getwd(), &quot;Data&quot;, &quot;Protein_correlation_matrix.txt&quot;) # # write.table( RNAseq_correlation_matrix , file = correlation_filename, col.names = TRUE, row.names = FALSE, sep = &quot;\\t&quot;, quote=FALSE) Use the CyRest call to access the aMatReader functionality. R correlation_filename &lt;- file.path(getwd(), &quot;Data&quot;, &quot;Protein_correlation_matrix.txt&quot;) amat_url &lt;- &quot;aMatReader/v1/import&quot; amat_params = list(files = list(correlation_filename), delimiter = &quot;TAB&quot;, undirected = FALSE, ignoreZeros = TRUE, interactionName = &quot;correlated with&quot;, rowNames = FALSE ) response &lt;- cyrestPOST(operation = amat_url, body = amat_params, base.url = &quot;http://localhost:1234&quot;) current_network_id &lt;- response$data[&quot;suid&quot;] R layoutNetwork(&#39;cose&#39;,network = as.numeric(current_network_id)) renameNetwork(title = &quot;Coexpression_network&quot;, network = current_network_id) One can map column attributes as we did in case of string database based on our desired attributes. R ?loadTableData loadTableData(data= as.data.frame(Age_prot), table.key.column = &quot;name&quot;, data.key.column= &quot;protein&quot;) #default data.frame key is row.names ## [1] &quot;Failed to load data: Please check data.key.column&quot; R createColumnFilter(filter.name=&#39;Fold change&#39;, column=&quot;logFC&quot;, 0.01, &quot;GREATER_THAN&quot;, network = &quot;Coexpression_network&quot;) ## $nodes ## [1] &quot;Q9Y6R7&quot; &quot;P04275&quot; &quot;P10643&quot; &quot;P02741&quot; &quot;P23142&quot; &quot;Q06033&quot; &quot;Q14118&quot; &quot;P61626&quot; &quot;Q9UBX5&quot; &quot;P36222&quot; &quot;P41222&quot; &quot;Q12805&quot; &quot;P02760&quot; ## [14] &quot;P08493&quot; &quot;P01034&quot; &quot;P39060&quot; &quot;Q14767&quot; &quot;P08294&quot; &quot;P00746&quot; &quot;P20774&quot; &quot;P61769&quot; ## ## $edges ## [1] NA R nodes &lt;- getSelectedNodes() setNodeColorBypass(nodes,new.colors=&#39;#FF0088&#39;) 1.11 Bonus exercises Create consensus scores to the respective gene and methylation data-sets, create and network based on string db. Map attributes where both gene expression and methylation data agrees most. R ## Create attributes for the &quot;Age&quot; dataset AgeingExpMeth$ExpAgeUp &lt;- AgeingExpMeth$ExpAgeDirection %&gt;% stringi::stri_count( regex = &quot;[+]&quot;) AgeingExpMeth$ExpAgeDown &lt;- AgeingExpMeth$ExpAgeDirection %&gt;% stringi::stri_count( regex = &quot;[-]&quot;) AgeingExpMeth$MethAgeUp &lt;- AgeingExpMeth$MethAgeDirection %&gt;% stringi::stri_count( regex = &quot;[+]&quot;) AgeingExpMeth$MethAgeDown &lt;- AgeingExpMeth$MethAgeDirection %&gt;% stringi::stri_count( regex = &quot;[-]&quot;) AgeingExpMeth$ExpMethUp &lt;- AgeingExpMeth$ExpMethDirection %&gt;% stringi::stri_count( regex = &quot;[+]&quot;) AgeingExpMeth$ExpMethDown &lt;- AgeingExpMeth$ExpMethDirection %&gt;% stringi::stri_count( regex = &quot;[-]&quot;) 1.12 End the session "]
]
